### 版本控制----GIT

之前一直使用svn来做版本控制，最近在gitlab上参与开发一个项目，因此接触到了git，发现也是个不错的东东~~
这里先简单讲几个比较常用的命令吧。

1. **git init**

    初始化一个git库，在这个版本库中进行其他相关操作，不多说了。

2. **git add  <file_path\>**

    将文件添加到本地git版本库中去，此时还未提交到远程服务器。

3. **git rm [option] <file_path\>**

    git rm --cached ./test.dat 会将test.dat文件从索引区中删除，并不会将文件从硬盘中删除，
    git rm --f ./test.dat 会把文件从硬盘中删除。
    
4. **git commit [option] <file_path>**

    git commit -m "fix bug" 将索引区中的文件提交到本地仓库。

5. **git clone <remote_path>**

    将远程仓库克隆到本地。

6. **git remote**

    git remote会列出所有的主机名，git remote -v 可以查看主机名对应的网址，如果需要添加主机名使用git remote add <name\> <url\>。

7. **git fetch**

    当你需要取回远程仓库代码时，使用git fetch <name\> 会将指定的远程主机的代码取回本地。如果想指定分支，则使用git fetch <name\> <branch_name> 。

8. **git pull <远程主机名\> <远程分支名\>:<本地分支名\>**

    将远程仓库中的代码合并到指定本地分支上，如果是想合并到当前本地分支，则冒号后面可以省略，
    如：git pull origin master 。
    
9. **git push <远程主机名\> <远程分支名\>:<本地分支名\>**

    与git pull相反，git push 将本地仓库中的代码提交到远程仓库中。


git 还有很多其他的用法，不过这里列举的几个命令应该是最常的了，平时遇到git的问题还可以从[官网](https://git-scm.com/doc)上去翻阅文档。git和svn最大的不同应该就是，git是分布式的，而svn不是。由于git是将远程仓库克隆在本地，因此git在没有网络的情况下，依然可以查看提交记录，提交代码之类的操作。










